# Set the minimum version of CMake that can be used
cmake_minimum_required (VERSION 3.12.0)

# Set the C++ standard required for the project
set(CMAKE_CXX_STANDARD 17)  # C++ 17
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set the project name
project (MITOQUEST VERSION 1.5.4 LANGUAGES CXX)

# Add project metadata
set(PROJECT_AUTHOR "Shujia Huang")
set(PROJECT_EMAIL "hshujia@qq.com")
set(PROJECT_DESCRIPTION "mitoquest: Human Mitochondrial sequencing data Analysis Toolkit")

# Configure version header
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.in
    ${CMAKE_CURRENT_SOURCE_DIR}/src/version.h
)

# Set compiler flags
# -O3: optimization level 3
# -fPIC: generate position-independent code
# -Wl,-no_compact_unwind: disable compact unwind information for MacOS only
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -fPIC")
if (APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,-no_compact_unwind")
endif()

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)

# Ensure htslib is built before the main executable
add_custom_target(
    Buildhts ALL
    COMMAND autoreconf -i && ./configure && make
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/htslib
)

# Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/htslib)  # include the header of htslib
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)     # include the header of mitoquest

# Define common system libraries
set(COMMON_SYS_LIB pthread z bz2 m lzma curl)
if(NOT APPLE)
    list(APPEND COMMON_SYS_LIB ssl crypto)
endif()

# Define htslib library
set(HTSLIB ${CMAKE_CURRENT_SOURCE_DIR}/htslib/libhts.a)

# Compile mitoquest - main executable
file(GLOB_RECURSE SRC_MT 
    "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/io/*.cpp"
)

add_executable(mitoquest ${SRC_MT})
add_dependencies(mitoquest Buildhts)
target_link_libraries(mitoquest ${HTSLIB} ${COMMON_SYS_LIB})

####################################################################################################
####### Compile the test and other executables scripts
####################################################################################################
# Compile count_align_fragments.cpp
# add_executable(count_align_fragments ${CMAKE_CURRENT_SOURCE_DIR}/scripts/count_align_fragments.cpp)
# add_dependencies(count_align_fragments Buildhts)
# target_link_libraries(count_align_fragments ${HTSLIB} ${COMMON_SYS_LIB})


####################################################################################################
####### Testing Configuration
####################################################################################################
option(BUILD_TESTING "Build the testing tree" OFF)  # 默认关闭测试构建

if(BUILD_TESTING)
    # Enable testing support
    enable_testing()

    # Find GTest package
    find_package(GTest REQUIRED)

    # Add test directory
    add_subdirectory(tests)
endif()